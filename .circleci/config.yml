version: 2.1
orbs:
  gcp-gcr: circleci/gcp-gcr@0.15.0
  cloudrun: circleci/gcp-cloud-run@1.0.1
  gcp-cli: circleci/gcp-cli@2.1
executors:
  gcloud-executor:
    docker:
      - image: google/cloud-sdk
  machine-executor:
    machine: true
jobs:
  build:
    docker:
      - image: maven:3.8.1-openjdk-17-slim
    environment:
      MAVEN_CLI_OPTS: "--batch-mode"
    steps:
      - checkout
      - run: mvn $MAVEN_CLI_OPTS clean package -Pproduction -e
      - store_artifacts:
          path: target
          destination: target
  test:
    docker:
      - image: maven:3.8.1-openjdk-17-slim
    steps:
      - checkout
      - run: mvn test -e
      - store_artifacts:
          path: reports
          destination: reports
  build_push_image_gcr:
    description: Build docker image and push to gcr registry
    executor: gcp-gcr/default
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - run:
          name: Build app binary and Docker image
          command: |
            echo 'export PATH=~$PATH:~/.local/bin' >> $BASH_ENV
            echo ${GCP_PROJECT_KEY} | base64 --decode --ignore-garbage > $HOME/gcloud-service-key.json
            echo 'export GOOGLE_CLOUD_KEYS=$(cat $HOME/gcloud-service-key.json)' >> $BASH_ENV
            echo 'export TAG=$CIRCLE_SHA1' >> $BASH_ENV
      - gcp-gcr/gcr-auth
      - gcp-gcr/build-image:
          dockerfile: Dockerfile
          google-project-id: GOOGLE_PROJECT_ID
          registry-url: "gcr.io"
          image: $CIRCLE_WORKFLOW_ID
          tag: "latest"
      - gcp-gcr/push-image:
          google-project-id: GOOGLE_PROJECT_ID
          image: $CIRCLE_WORKFLOW_ID
          registry-url: "gcr.io"
          tag: "latest"
      - cloudrun/init
      - cloudrun/deploy:
          platform: 'managed'
          image: 'gcr.io/$GOOGLE_PROJECT_ID/$CIRCLE_WORKFLOW_ID'
          service-name: 'vaadin-ui-service'
          region: 'europe-west6'
          unauthenticated: true
workflows:
  version: 2
  workflow:
    jobs:
      - build
      - test:
          requires:
            - build
      - build_push_image_gcr:
          requires:
            - build


# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# [START cloudbuild_sql_proxy]
steps:
  - id: "docker-build"
    name: "gcr.io/cloud-builders/docker"
    args: ["build", "-t", "${_IMAGE_NAME}", "sql-proxy/."]

  - id: "docker-push"
    name: "gcr.io/cloud-builders/docker"
    args: ["push", "${_IMAGE_NAME}"]

  # [START cloudbuild_sql_proxy_layer]
  - id: "docker-layer"
    name: "gcr.io/cloud-builders/docker"
    entrypoint: /bin/bash
    args:
      - '-c'
      - |
        echo "FROM $_IMAGE_NAME
        COPY --from=gcr.io/cloud-sql-connectors/cloud-sql-proxy /cloud-sql-proxy /cloudsql/cloud-sql-proxy" > Dockerfile-proxy;

        docker build -f Dockerfile-proxy -t ${_IMAGE_NAME}-proxy .
  # [END cloudbuild_sql_proxy_layer]

  # [START cloudbuild_sql_proxy_tcp]
  # For TCP connections
  - id: "migrate-tcp"
    name: "${_IMAGE_NAME}-proxy"
    dir: sql-proxy
    env:
      - "DATABASE_NAME=${_DATABASE_NAME}"
      - "DATABASE_USER=${_DATABASE_USER}"
      - "DATABASE_HOST=127.0.0.1"
      - "DATABASE_PORT=${_DATABASE_PORT}"
      - "DATABASE_TYPE=${_DATABASE_TYPE}"
    secretEnv:
      - DATABASE_PASS
    entrypoint: /bin/bash
    args:
      - '-c'
      - |
        /cloudsql/cloud-sql-proxy --port ${_DATABASE_PORT} ${_INSTANCE_CONNECTION_NAME} & sleep 2;
        python migrate.py # for example
  # [END cloudbuild_sql_proxy_tcp]

  # [START cloudbuild_sql_proxy_socket]
  # For Unix Socket connections
  - id: "migrate-socket"
    name: "${_IMAGE_NAME}-proxy"
    dir: sql-proxy
    env:
      - "DATABASE_NAME=${_DATABASE_NAME}"
      - "DATABASE_USER=${_DATABASE_USER}"
      - "INSTANCE_CONNECTION_NAME=${_INSTANCE_CONNECTION_NAME}"
      - "DATABASE_TYPE=${_DATABASE_TYPE}"
    secretEnv:
      - DATABASE_PASS
    entrypoint: /bin/bash
    args:
      - '-c'
      - |
        /cloudsql/cloud-sql-proxy --unix-socket /cloudsql ${_INSTANCE_CONNECTION_NAME} & sleep 2;
        if [ $_DATABASE_TYPE = 'mssql' ]; then echo "MSSQL doesn't support Unix Sockets. Skippng."; exit 0; fi;
        python migrate.py # for example.
  # [END cloudbuild_sql_proxy_socket]

options:
  dynamic_substitutions: true

substitutions:
  _DATABASE_USER: postgres
  _DATABASE_NAME: webstarsdb
  _INSTANCE_CONNECTION_NAME: webstars-389315:europe-west6:webstarssql
  _DATABASE_PORT: '5432'
  _DATABASE_TYPE: postgres
  _DATABASE_PASSWORD_KEY: Sieglinde90
  _IMAGE_NAME: $CIRCLE_WORKFLOW_ID

availableSecrets:
  secretManager:
    - versionName: projects/webstars-389315/secrets/Sieglinde90/versions/latest
      env: Sieglinde90
# [END cloudbuild_sql_proxy]